// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/RuhullahReza/Employee-App/app/domain"

	mock "github.com/stretchr/testify/mock"
)

// EmployeeRepository is an autogenerated mock type for the EmployeeRepository type
type EmployeeRepository struct {
	mock.Mock
}

// DeleteById provides a mock function with given fields: id
func (_m *EmployeeRepository) DeleteById(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: limit, offset, orderBy, order
func (_m *EmployeeRepository) FindAll(limit int, offset int, orderBy string, order string) ([]domain.Employee, int64, error) {
	ret := _m.Called(limit, offset, orderBy, order)

	var r0 []domain.Employee
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string, string) ([]domain.Employee, int64, error)); ok {
		return rf(limit, offset, orderBy, order)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, string) []domain.Employee); ok {
		r0 = rf(limit, offset, orderBy, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, string) int64); ok {
		r1 = rf(limit, offset, orderBy, order)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, string, string) error); ok {
		r2 = rf(limit, offset, orderBy, order)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindByEmail provides a mock function with given fields: email
func (_m *EmployeeRepository) FindByEmail(email string) (domain.Employee, error) {
	ret := _m.Called(email)

	var r0 domain.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.Employee, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) domain.Employee); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(domain.Employee)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *EmployeeRepository) FindById(id uint) (domain.Employee, error) {
	ret := _m.Called(id)

	var r0 domain.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (domain.Employee, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) domain.Employee); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Employee)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: employee
func (_m *EmployeeRepository) Store(employee *domain.Employee) error {
	ret := _m.Called(employee)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Employee) error); ok {
		r0 = rf(employee)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateById provides a mock function with given fields: employee
func (_m *EmployeeRepository) UpdateById(employee *domain.Employee) error {
	ret := _m.Called(employee)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Employee) error); ok {
		r0 = rf(employee)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEmployeeRepository creates a new instance of EmployeeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmployeeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmployeeRepository {
	mock := &EmployeeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
