// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/RuhullahReza/Employee-App/app/domain"

	mock "github.com/stretchr/testify/mock"
)

// EmployeeUsecase is an autogenerated mock type for the EmployeeUsecase type
type EmployeeUsecase struct {
	mock.Mock
}

// CreateEmployee provides a mock function with given fields: req
func (_m *EmployeeUsecase) CreateEmployee(req domain.EmployeeRequest) (domain.EmployeeResponse, error) {
	ret := _m.Called(req)

	var r0 domain.EmployeeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.EmployeeRequest) (domain.EmployeeResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(domain.EmployeeRequest) domain.EmployeeResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(domain.EmployeeResponse)
	}

	if rf, ok := ret.Get(1).(func(domain.EmployeeRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEmployeeById provides a mock function with given fields: id
func (_m *EmployeeUsecase) DeleteEmployeeById(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllEmployee provides a mock function with given fields: page, limit, orderBy, sort
func (_m *EmployeeUsecase) GetAllEmployee(page int, limit int, orderBy string, sort string) (domain.PaginationResponse, error) {
	ret := _m.Called(page, limit, orderBy, sort)

	var r0 domain.PaginationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, string, string) (domain.PaginationResponse, error)); ok {
		return rf(page, limit, orderBy, sort)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, string) domain.PaginationResponse); ok {
		r0 = rf(page, limit, orderBy, sort)
	} else {
		r0 = ret.Get(0).(domain.PaginationResponse)
	}

	if rf, ok := ret.Get(1).(func(int, int, string, string) error); ok {
		r1 = rf(page, limit, orderBy, sort)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmployeeById provides a mock function with given fields: id
func (_m *EmployeeUsecase) GetEmployeeById(id uint) (domain.EmployeeResponse, error) {
	ret := _m.Called(id)

	var r0 domain.EmployeeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (domain.EmployeeResponse, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) domain.EmployeeResponse); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.EmployeeResponse)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEmployeeById provides a mock function with given fields: id, req
func (_m *EmployeeUsecase) UpdateEmployeeById(id uint, req domain.EmployeeRequest) (domain.EmployeeResponse, error) {
	ret := _m.Called(id, req)

	var r0 domain.EmployeeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, domain.EmployeeRequest) (domain.EmployeeResponse, error)); ok {
		return rf(id, req)
	}
	if rf, ok := ret.Get(0).(func(uint, domain.EmployeeRequest) domain.EmployeeResponse); ok {
		r0 = rf(id, req)
	} else {
		r0 = ret.Get(0).(domain.EmployeeResponse)
	}

	if rf, ok := ret.Get(1).(func(uint, domain.EmployeeRequest) error); ok {
		r1 = rf(id, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEmployeeUsecase creates a new instance of EmployeeUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmployeeUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmployeeUsecase {
	mock := &EmployeeUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
